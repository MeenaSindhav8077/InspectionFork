@model Inspection.Web.Models.MainInwardModel
@using Inspection.Web.Service

@{

    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    int Count = 1;
}

@section styles{
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="~/Content/assets/libs/prismjs/prism.js"></script>
    <script src="~/Content/assets/js/app.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="~/Content/assets/js/pages/select2.init.js"></script>
    <script src="~/Content/assets/js/app.js"></script>
    <script src="~/Content/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/Content/assets/js/pages/sweetalerts.init.js"></script>
    <script src="~/Content/assets/js/app.js"></script>
}
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Inward Form</h4>
            </div>
            @using (Html.BeginForm("AddINward", "Inward", FormMethod.Post, new { id = "inwardForm" }))
            {
                @Html.HiddenFor(model => model._INWARD.id)
                <div class="card-body">
                    <div class="live-preview">
                        <div class="row gy-4">
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.InwardDate, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.InwardDate, new { @class = "form-control", type = "datetime-local", id = "Inwarddate", @required="required" })
                                </div>
                            </div>
                            @*<div class="col-xxl-3 col-md-6">
                                    <div>
                                        @Html.LabelFor(model => model._INWARD.InwardTime, new { @class = "form-label" })
                                        @Html.TextBoxFor(model => model._INWARD.InwardTime, new { @class = "form-control", type = "datetime-local", id = "Inputdatetime" })
                                    </div>
                                </div>*@
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.JobNo, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.JobNo, new { @class = "form-control", id = "idjobnumber", @required = "required" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.Partno, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.Partno, new { @class = "form-control", id = "idpartnumber", @readonly = "readonly", @required = "required" })
                                </div>
                            </div>
                            @{
                                var _DropDownListService = new Inspection.Web.Service.Maineservice();
                                var _TypeList = _DropDownListService.GetInspectiontype();
                            }
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.Qty, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.Qty, new { @class = "form-control", id = "Inputqty", @required = "required" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.ERev, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.ERev, new { @class = "form-control", id = "idrev", @readonly = "readonly", @required = "required" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.ActualRev, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.ActualRev, new { @class = "form-control", id = "Inputact", @required = "required" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                @{
                                    var staticData = new List<SelectListItem>

                                                                                                {
                                       new SelectListItem { Value = "Thread ", Text = "Thread Inspection" },
                                       new SelectListItem { Value = "Visual ", Text = "Visual Inspection" },
                                       new SelectListItem { Value = "Final", Text = "Final Inspection" },
                                       new SelectListItem { Value = "Humidity ", Text = "Humidity Inspection" }
                                  };

                                    var qualitystage = new List<SelectListItem>
{
                                         new SelectListItem { Value = "N/A ", Text = "N/A" },
                                         new SelectListItem { Value = "AFTER PRIMARY PASSIVATION ", Text = "AFTER PRIMARY PASSIVATION" },
                                         new SelectListItem { Value = "AFTER CHROME,LM &amp; SECONDARY PASSIVATION  ", Text = "AFTER CHROME,LM &amp; SECONDARY PASSIVATION " },
                                         new SelectListItem { Value = "BEFORE ZINC PLATTING  ", Text = "BEFORE ZINC PLATTING " },
                                         new SelectListItem { Value = "AFTER LM &amp; SECONDARY PASSIVATION ", Text = "AFTER LM &amp; SECONDARY PASSIVATION " },
                                         new SelectListItem { Value = "BEFORE HT ", Text = "BEFORE HT" },
                                         new SelectListItem { Value = "AFTER BRUSHFINISH ", Text = "AFTER BRUSHFINISH" },
                                         new SelectListItem { Value = "AFTER EDM ", Text = "AFTER EDM" },
                                         new SelectListItem { Value = "AFTER GB ", Text = "AFTER GB " },
                                         new SelectListItem { Value = "AFTER HT ", Text = "AFTER HT" },
                                         new SelectListItem { Value = "AFTER GB &amp; BRUSHFINISH ", Text = "AFTER GB &amp; BRUSHFINISH" },
                                         new SelectListItem { Value = "BEFORE BLACKOXIDE ", Text = "BEFORE BLACKOXIDE" },
                                         new SelectListItem { Value = "AFTER ASSEMBLY ", Text = "AFTER ASSEMBLY" },
                                         new SelectListItem { Value = "BEFORE GB ", Text = "BEFORE GB" },
                                         new SelectListItem { Value = "BEFORE PASSIVATION ", Text = "BEFORE PASSIVATION" },
                                         new SelectListItem { Value = "AFTER BLACKOXIDE ", Text = "AFTER BLACKOXIDE" },
                                         new SelectListItem { Value = "BEFORE BRUSHFINISH ", Text = "BEFORE BRUSHFINISH" },
                                         new SelectListItem { Value = "AFTER SECONDARY PASSIVATION ", Text = "AFTER SECONDARY PASSIVATION" },
                                         new SelectListItem { Value = "AFTER CHROME ", Text = "AFTER CHROME" },
                                         new SelectListItem { Value = "AFTER ZINC PLATTING ", Text = "AFTER ZINC PLATTING" },
                                         new SelectListItem { Value = "BEFORE ASSEMBLY ", Text = "BEFORE ASSEMBLY" },
                                         new SelectListItem { Value = "AFTER ELECTROPOLISH ", Text = "AFTER ELECTROPOLISH" },
                                         new SelectListItem { Value = "AFTER ASSEMBLY &amp; LM ", Text = "AFTER ASSEMBLY &amp; LM" },
                                         new SelectListItem { Value = "After machining", Text = "After machining" },
                                         new SelectListItem { Value = "After gundrill ", Text = "After gundrill" },
                                         new SelectListItem { Value = "After sterilization ", Text = "After sterilization" },
                                         new SelectListItem { Value = "Purchase part ", Text = "Purchase part" },
                                         new SelectListItem { Value = "After welding ", Text = "After welding" },
                                         new SelectListItem { Value = "PROTOTYPE ", Text = "PROTOTYPE" }
                                    };
                                    var notedata = new List<SelectListItem>
{
                                          new SelectListItem { Value = "100% Visual/Gauge Inspection ", Text = "100% Visual/Gauge Inspection" },
                                          new SelectListItem { Value = "Out source parts", Text = "Out source parts" },
                                          new SelectListItem { Value = "Unit price zero", Text = "Unit price zero" },
                                          new SelectListItem { Value = "Assembly part", Text = "Assembly part" },
                                          new SelectListItem { Value = "Forecast", Text = "Forecast" },
                                     };
                                }
                                @Html.LabelFor(model => model._INWARD.QualityStage, new { @class = "form-label" })
                                @Html.DropDownListFor(model => model._INWARD.QualityStage, qualitystage, "select..", new { @class = "form-select mb-3 js-example-basic-single", id = "InputstageQuality", @required = "required" })
                            </div>
                            <div class="col-xxl-3 col-md-6">

                                @Html.LabelFor(model => model._INWARD.Note, new { @class = "form-label" })
                                @Html.DropDownListFor(model => model._INWARD.Note, notedata, "select...", new { @class = "form-select mb-3 js-example-basic-single", id = "Inputnote", onchange = "getsuuplierbxo(this)", @required = "required" })
                            </div>
                            <div class="col-xxl-3 col-md-6" id="supplierContainer" style="display: none;">
                                @Html.LabelFor(model => model._INWARD.Supplier, new { @class = "form-label" })
                                @Html.TextBoxFor(model => model._INWARD.Supplier, new { @class = "form-control", id = "supplierid" })
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                @Html.LabelFor(model => model._INWARD.InspectionType, new { @class = "form-label" })
                                @Html.DropDownListFor(model => model._INWARD.InspectionType, staticData, "select...", new { @class = "form-select mb-3 js-example-basic-single", id = "Inputinstype", onchange = "updateProcessStage()", @required = "required" })

                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <button type="submit" class="btn btn-primary waves-effect waves-light" id="btninwrad" style="margin-top:28px;">Save</button>
                                <input type="hidden" id="hiddenidinward" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Inward Data</h4>
            </div>
            <div class="card-body">
                <div class="live-preview">
                    <div class="table-responsive table-card">
                        <table class="table align-middle table-nowrap table-striped-columns mb-0" id="inwardDataTable">
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="">
    <button type="button" class="btn btn-primary waves-effect waves-light" onclick="finalsubmitdata()">Submit</button>
</div>


<script>
    document.getElementById("idjobnumber").addEventListener("keydown", function (event) {
        if (event.key === "Tab") {
            myFunction();
        }
    });

    function updateProcessStage() {
        debugger
        var inspectionType = document.getElementById("Inputinstype").value;
        var processStageDropdown = document.getElementById("Inputstage");

        // Set the value based on the selected inspection type
        if (inspectionType === "Final") {
            processStageDropdown.value = "1 - Parts waiting for Final  ";
        } else if (inspectionType === "Humidity ") {
            processStageDropdown.value = "1 - Parts waiting for Humidity  ";
        } else if (inspectionType === "Thread ") {
            processStageDropdown.value = "1 - Parts waiting for Thread  ";
        } else if (inspectionType === "Visual ") {
            processStageDropdown.value = "1 - Parts waiting for Visual";
        } else {
            processStageDropdown.value = "";
        }
    }

    function getsuuplierbxo(drpvalue) {
        debugger

        var dppp = drpvalue.value;

        if (dppp === 'Out source parts') {
            $('#supplierContainer').show();
        } else {
            $('#supplierContainer').hide();
        }
    }

    function finalsubmitdata() {
        var dataToSend = JSON.parse(localStorage.getItem('inwardData'));

        if (dataToSend) {
            var formData = new FormData();
            formData.append('jsonData', JSON.stringify(dataToSend));

            $.ajax({
                type: 'POST',
                url: '/Inward/finalinwarddata',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    debugger
                    if (response.successMessage) {

                        Swal.fire({
                            html: '<div class="mt-3">' +
                                '<lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px"></lord-icon>' +
                                '<div class="mt-4 pt-2 fs-15">' +
                                '<h4>Well done..! Data Saved Successfually!</h4>' +
                                '<p class="text-muted mx-4 mb-0"></p>' +
                                '</div>' +
                                '</div>',
                            showCancelButton: true,
                            showConfirmButton: false,
                            cancelButtonClass: 'btn btn-primary w-xs mb-1',
                            cancelButtonText: 'Back',
                            buttonsStyling: false,
                            showCloseButton: true
                        });
                    }
                    else if (response.warningMessage) {

                        Swal.fire({
                            html: '<div class="mt-3">' +
                                '<lord-icon src="https://cdn.lordicon.com/tdrtiskw.json" trigger="loop" colors="primary:#f06548,secondary:#f7b84b" style="width:120px;height:120px"></lord-icon>' +
                                '<div class="mt-4 pt-2 fs-15">' +
                                '<h4>Oops...! JobNumber is Allready exist !</h4>' +
                                '<p class="text-muted mx-4 mb-0"></p>' +
                                '</div>' +
                                '</div>',
                            showCancelButton: true,
                            showConfirmButton: false,
                            cancelButtonClass: 'btn btn-primary w-xs mb-1',
                            cancelButtonText: 'Back',
                            buttonsStyling: false,
                            showCloseButton: true
                        })
                    }
                    else {

                        Swal.fire({
                            html: '<div class="mt-3">' +
                                '<lord-icon src="https://cdn.lordicon.com/tdrtiskw.json" trigger="loop" colors="primary:#f06548,secondary:#f7b84b" style="width:120px;height:120px"></lord-icon>' +
                                '<div class="mt-4 pt-2 fs-15">' +
                                '<h4>Oops...! Something went Wrong !</h4>' +
                                '<p class="text-muted mx-4 mb-0">' + response.errormessage + '</p>' +
                                '</div>' +
                                '</div>',
                            showCancelButton: true,
                            showConfirmButton: false,
                            cancelButtonClass: 'btn btn-primary w-xs mb-1',
                            cancelButtonText: 'Back',
                            buttonsStyling: false,
                            showCloseButton: true
                        })
                    }

                    setTimeout(function () {
                        location.reload();
                    }, 5000);
                },
                error: function (error) {
                    console.error('Error sending data:', error);
                }
            });
        } else {
            console.warn('No data found in local storage');
        }

    }

    function myFunction() {
        debugger
        var element = document.getElementById("idjobnumber");

        var value = element.value;

        $.getJSON('/Inward/GetPartnorevno', { idjobnumber: value }, function (data) {
            if (data !== null) {
                debugger
                $("#idpartnumber").val(data.Partno);
                $("#idrev").val(data.ERev);
            } else {
                console.log("No data found or error occurred.");
            }
        });
    }

</script>
<script>
    $(document).ready(function () {
        debugger
        localStorage.clear();

        $("#inwardForm").submit(function (e) {
            debugger
            var checkbtn = $("#btninwrad").text();

            debugger
            e.preventDefault();
            if (checkbtn == "Save") {
                submitForm();
            }
            else {
                UpdateForm();

            }

        });

        document.getElementById("deleteitem").addEventListener("click", function () {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                cancelButtonClass: 'btn btn-danger w-xs mt-2',
                confirmButtonText: "Yes, delete it!",
                buttonsStyling: false,
                showCloseButton: true
            }).then(function (result) {
                if (result.value) {
                    Swal.fire({
                        title: 'Deleted!',
                        text: 'Your file has been deleted.',
                        icon: 'success',
                        confirmButtonClass: 'btn btn-primary w-xs mt-2',
                        buttonsStyling: false
                    })
                }
            });
        });

        function UpdateForm() {
            debugger
            var indexToUpdate = parseInt($("#hiddenidinward").val());
            var storedData = JSON.parse(localStorage.getItem("inwardData")) || [];
            if (indexToUpdate >= 0 && indexToUpdate < storedData.length) {

                storedData[indexToUpdate].find(d => d.name === "_INWARD.InwardDate").value = $("#Inwarddate").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.InwardTime").value = $("#Inputdatetime").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.JobNo").value = $("#idjobnumber").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.Partno").value = $("#idpartnumber").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.Qty").value = $("#Inputqty").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.ERev").value = $("#idrev").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.ActualRev").value = $("#Inputact").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.InspectionType").value = $("#Inputinstype").val(); // Update with your new value
                storedData[indexToUpdate].find(d => d.name === "_INWARD.Suppliername").value = $("#supplierid").val(); // Update with your new value
                //var selectedStageText = $("#Inputstage option:selected").text();
                //storedData[indexToUpdate].find(d => d.name === "_INWARD.ProcessStage").value = selectedStageText; // Update with the selected stage text
                var selectedStageText = $("#InputstageQuality option:selected").text();
                storedData[indexToUpdate].find(d => d.name === "_INWARD.QualityStage").value = selectedStageText;
                var selectedStageText = $("#Inputnote option:selected").text();
                storedData[indexToUpdate].find(d => d.name === "_INWARD.Note").value = selectedStageText;


                localStorage.setItem("inwardData", JSON.stringify(storedData));

                displayDataInTable();

                $("#btninwrad").text("Save");
                $("#hiddenidinward").val("");
                $("#inwardForm")[0].reset();

            } else {
                console.error("Invalid index to update");
            }
        }


        function submitForm() {
            debugger

            if (!validateForm()) {
                return;
            }

            var formData = $("#inwardForm").serializeArray();
            console.log(formData);

            var existingData = JSON.parse(localStorage.getItem("inwardData")) || [];


            existingData.push(formData);
            debugger

            localStorage.setItem("inwardData", JSON.stringify(existingData));


            displayDataInTable();
            // $("#inwardForm")[0].reset();
        }


        //function displayDataInTable() {

        //    debugger
        //    var table = $("#inwardDataTable");
        //    table.empty();
        //    console.log(localStorage);
        //    var storedData = JSON.parse(localStorage.getItem("inwardData")) || [];
        //    console.log(storedData);

        //    table.append("<thead>" +
        //        "<tr>" +
        //        "<th> Delete</th> " +
        //        "<th> Edit</th> " +
        //        "<th> Id</th > " +
        //        "<th> InwardDateTime</th > " +
        //        "<th> JobNo</th> " +
        //        "<th> Partno</th> " +
        //        "<th> Qty</th> " +
        //        "<th> ERev</th> " +
        //        "<th> ActualRev</th> " +
        //        "<th> QualityStage</th> " +
        //        "<th> Note</th> " +
        //        "<th> InspectionType</th> " +
        //        "</tr> " +
        //        "</thead> ");


        //    var tbody = $("<tbody></tbody>");
        //    let count = 1;

        //    for (var i = 0; i < storedData.length; i++) {
        //        var row = $("<tr></tr>");
        //        row.append("<td><button class='btn btn-danger delete-btn' data-index='" + i + "'>Delete</button></td>");
        //        row.append("<td><button class='btn btn-success edit-btn' data-index='" + i + "'>Edit</button></td>");
        //        for (var j = 0; j < storedData[i].length; j++) {

        //            if (storedData[i][j].name == "_INWARD.id") {
        //                row.append("<td>" + count + "</td>")
        //            } else {
        //                row.append("<td>" + storedData[i][j].value + "</td>")
        //            }

        //        }
        //        tbody.append(row);
        //        count++;
        //    }
        //    table.append(tbody);

        //    $(".delete-btn").click(function () {
        //        var index = $(this).data("index");

        //        storedData.splice(index, 1);

        //        localStorage.setItem("inwardData", JSON.stringify(storedData));


        //        displayDataInTable();
        //    });

        //    $(".edit-btn").click(function () {
        //        var index = $(this).data("index");
        //        $("#hiddenidinward").val(index);
        //        var dataForEdit = storedData[index];
        //        populateFormForEdit(dataForEdit);
        //        $("#btninwrad").text("Update");
        //    });
        //}
        function displayDataInTable() {
            debugger;
            var table = $("#inwardDataTable");
            table.empty();

            var storedData = JSON.parse(localStorage.getItem("inwardData")) || [];

            // Table Header
            table.append("<thead>" +
                "<tr>" +
                "<th>Delete</th>" +
                "<th>Edit</th>" +
                "<th>Id</th>" +
                "<th>InwardDateTime</th>" +
                "<th>JobNo</th>" +
                "<th>Partno</th>" +
                "<th>Qty</th>" +
                "<th>ERev</th>" +
                "<th>ActualRev</th>" +
                "<th>QualityStage</th>" +
                "<th>Note</th>" +
                "<th>InspectionType</th>" +
                "</tr>" +
                "</thead>");

            var tbody = $("<tbody></tbody>");
            let count = 1;

            const fieldOrder = [
                "_INWARD.InwardDate",
                "_INWARD.JobNo",
                "_INWARD.Partno",
                "_INWARD.Qty",
                "_INWARD.ERev",
                "_INWARD.ActualRev",
                "_INWARD.QualityStage",
                "_INWARD.Note",
                "_INWARD.InspectionType"
            ];

            for (var i = 0; i < storedData.length; i++) {
                var row = $("<tr></tr>");
                row.append("<td><button class='btn btn-danger delete-btn' data-index='" + i + "'>Delete</button></td>");
                row.append("<td><button class='btn btn-success edit-btn' data-index='" + i + "'>Edit</button></td>");
                row.append("<td>" + count + "</td>");

                // Convert form array to key-value pair object
                const map = {};
                for (let j = 0; j < storedData[i].length; j++) {
                    map[storedData[i][j].name] = storedData[i][j].value;
                }

                // Append values in correct order
                for (const field of fieldOrder) {
                    row.append("<td>" + (map[field] || "") + "</td>");
                }

                tbody.append(row);
                count++;
            }

            table.append(tbody);

            // Attach delete and edit handlers
            $(".delete-btn").click(function () {
                var index = $(this).data("index");
                storedData.splice(index, 1);
                localStorage.setItem("inwardData", JSON.stringify(storedData));
                displayDataInTable();
            });

            $(".edit-btn").click(function () {
                var index = $(this).data("index");
                $("#hiddenidinward").val(index);
                var dataForEdit = storedData[index];
                populateFormForEdit(dataForEdit);
                $("#btninwrad").text("Update");
            });
        }

        displayDataInTable();
    });

    function populateFormForEdit(data) {
        $("#Inwarddate").val(data.find(d => d.name === "_INWARD.InwardDate").value);
        $("#Inputdatetime").val(data.find(d => d.name === "_INWARD.InwardTime").value);
        $("#idjobnumber").val(data.find(d => d.name === "_INWARD.JobNo").value);
        $("#idpartnumber").val(data.find(d => d.name === "_INWARD.Partno").value);
        $("#Inputqty").val(data.find(d => d.name === "_INWARD.Qty").value);
        $("#idrev").val(data.find(d => d.name === "_INWARD.ERev").value);
        $("#Inputact").val(data.find(d => d.name === "_INWARD.ActualRev").value);
        $("#Inputinstype").val(data.find(d => d.name === "_INWARD.InspectionType").value);
        $("#Inputstage").val(data.find(d => d.name === "_INWARD.ProcessStage").value);
        $("#InputstageQuality").val(data.find(d => d.name === "_INWARD.QualityStage").value);
    }

    function saveChanges(index) {
        for (var j = 0; j < storedData[index].length; j++) {
            storedData[index][j].value = $("tr").eq(index + 1).find(".edit-input").eq(j).val();
        }

        localStorage.setItem("inwardData", JSON.stringify(storedData));

        displayDataInTable();
    }

    function validateForm() {
        debugger
        var Inwarddate = $("#Inwarddate").val();
        var Inputdatetime = $("#Inputdatetime").val();
        var idjobnumber = $("#idjobnumber").val();
        var idpartnumber = $("#idpartnumber").val();
        var QTY = $("#Inputqty").val();
        var Arev = $("#Inputact").val();
        var QualityStage = $("#InputstageQuality").val();
        var Note = $("#Inputnote").val();
        var Supplier = $("#supplierid").val();
        var InspectionType = $("#Inputinstype").val();
        if (!Inwarddate) {
            alert("Inwarddate is required");
            return false;
        }
        if (!idjobnumber) {
            alert("JobNo is required");
            return false;
        }
        if (!idpartnumber) {
            alert("idpartnumber is required");
            return false;
        }
        if (!QTY) {
            alert("QTY is required");
            return false;
        }
        if (!Arev) {
            alert("Actualrevision is required");
            return false;
        }
        if (!QualityStage || QualityStage === "select..") {
            alert("Quality Stage is required");
            return false;
        }
        if (!Note || Note === "select...") {
            alert("Note is required");
            return false;
        }

        if ($("#supplierContainer").is(":visible") && !Supplier) {
            alert("Supplier is required");
            return false;
        }

        if (!InspectionType || InspectionType === "select...") {
            alert("Inspection Type is required");
            return false;
        }
        return true;
    }

</script>