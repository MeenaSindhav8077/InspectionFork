@model Inspection.Web.Models.MainInwardModel
@using Inspection.Web.Service

@{

    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    int Count = 1;
}

@section styles{
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />

   
        @Scripts.Render("~/bundles/jqueryval")

        <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

        <script src="~/Content/assets/libs/prismjs/prism.js"></script>

        <script src="~/Content/assets/js/app.js"></script>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <!--jquery cdn-->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
        <!--select2 cdn-->
        <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

        <script src="~/Content/assets/js/pages/select2.init.js"></script>

        <!-- App js -->
        <script src="~/Content/assets/js/app.js"></script>

        <!-- Sweet Alerts js -->
        <script src="~/Content/assets/libs/sweetalert2/sweetalert2.min.js"></script>

        <!-- Sweet alert init js-->
        <script src="~/Content/assets/js/pages/sweetalerts.init.js"></script>

        <!-- App js -->
        <script src="~/Content/assets/js/app.js"></script>

}
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Inward Form</h4>
            </div>
            @using (Html.BeginForm("AddINward", "Inward", FormMethod.Post))
            {
                @Html.HiddenFor(model => model._INWARD.id)
                <div class="card-body">
                    <div class="live-preview">
                        <div class="row gy-4">
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.InwardDate, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.InwardDate, new { @class = "form-control", type = "Date", id = "exampleInputdate" })
                                    @Html.ValidationMessageFor(model => model._INWARD.InwardDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.InwardTime, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.InwardTime, new { @class = "form-control", type = "time", id = "exampleInputdate" })
                                    @Html.ValidationMessageFor(model => model._INWARD.InwardTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.JobNo, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.JobNo, new { @class = "form-control", id = "idjobnumber" })
                                    @Html.ValidationMessageFor(model => model._INWARD.JobNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.Partno, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.Partno, new { @class = "form-control", id = "idpartnumber", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model._INWARD.Partno, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            @{
                                var _DropDownListService = new Inspection.Web.Service.Maineservice();
                                var _TypeList = _DropDownListService.GetInspectiontype();
                            }
                            <div class="col-xxl-3 col-md-6">
                                @Html.LabelFor(model => model._INWARD.Stage, new { @class = "form-label" })
                                @Html.DropDownListFor(model => model._INWARD.Stage, _TypeList, "Select", new { @class = "form-select mb-3", id = "disabledInput" })
                                @Html.ValidationMessageFor(model => model._INWARD.Stage, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.ERev, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.ERev, new { @class = "form-control", id = "idrev", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model._INWARD.ERev, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.ActualRev, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.ActualRev, new { @class = "form-control", id = "labelInput" })
                                    @Html.ValidationMessageFor(model => model._INWARD.ActualRev, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                <div>
                                    @Html.LabelFor(model => model._INWARD.Qty, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model._INWARD.Qty, new { @class = "form-control", id = "labelInput" })
                                    @Html.ValidationMessageFor(model => model._INWARD.Qty, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-xxl-3 col-md-6">
                                @{
                                    var staticData = new List<SelectListItem>
{
                                         new SelectListItem { Value = "Final", Text = "Final Inspection" },
                                         new SelectListItem { Value = "Humidity ", Text = "Humidity Inspection" },
                                         new SelectListItem { Value = "Thread ", Text = "Thread Inspection" },
                                         new SelectListItem { Value = "Visual ", Text = "Visual Inspection" }
                                    };
                                }
                                @Html.LabelFor(model => model._INWARD.Status, new { @class = "form-label" })
                                @Html.DropDownListFor(model => model._INWARD.Status, staticData, new { @class = "form-select mb-3", id = "disabledInput" })
                                @Html.ValidationMessageFor(model => model._INWARD.Status, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xxl-6 md-6">
                            </div>
                            <div class="col-xxl-3 md-6">
                                <button type="submit" class="btn btn-primary waves-effect waves-light" style="float: right; margin: 20px 0 0;">Submit</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xl-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Inward Data</h4>
            </div><!-- end card header -->

            <div class="card-body">

                <div class="live-preview">
                    <div class="table-responsive table-card">
                        <table class="table align-middle table-nowrap table-striped-columns mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">Sr</th>
                                    <th scope="col">Inward Date</th>
                                    <th scope="col">Inward Time</th>
                                    <th scope="col">Job No.</th>
                                    <th scope="col">Part No</th>
                                    <th scope="col">Stage</th>
                                    <th scope="col">ERev</th>
                                    <th scope="col">ActualRev</th>
                                    <th scope="col">Qty</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model != null)
                                {
                                    if (Model._INWARDList != null)
                                    {
                                        foreach (var item in Model._INWARDList)
                                        {
                                            <tr>
                                                <td>
                                                    @Html.DisplayFor(modelItem => Count)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.InwardDate, "{0:dd, MMM yyyy}")
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.InwardTime)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.JobNo)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.Partno)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.Stage)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.ERev)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.ActualRev)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.Qty)
                                                </td>
                                                <td>
                                                        @item.Status  Inspection
                                                </td> 
                                                <td>
                                                    <div class="d-flex gap-2">
                                                        <div class="edit">
                                                            @Html.ActionLink("Edit", "Edit",  new { id = item.id }, new { @class = "btn btn-sm btn-success " })
                                                        </div>
                                                        <div class="remove">
                                                            @Html.ActionLink("Delete", "Delete", new { id = item.id }, new { @class = "btn btn-sm btn-danger ",@id= "deleteitem" })
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            Count++;
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        debugger
            var successMessage = '@TempData["SuccessMessage"]';
        var WarningMessage = '@TempData["WarningMessage"]';

            if (successMessage) {
                Swal.fire({
                    html: '<div class="mt-3">' +
                        '<lord-icon src="https://cdn.lordicon.com/lupuorrc.json" trigger="loop" colors="primary:#0ab39c,secondary:#405189" style="width:120px;height:120px"></lord-icon>' +
                        '<div class="mt-4 pt-2 fs-15">' +
                        '<h4>Well done !</h4>' +
                        '<p class="text-muted mx-4 mb-0">' + successMessage + '</p>' +
                        '</div>' +
                        '</div>',
                    showCancelButton: true,
                    showConfirmButton: false,
                    cancelButtonClass: 'btn btn-primary w-xs mb-1',
                    cancelButtonText: 'Back',
                    buttonsStyling: false,
                    showCloseButton: true
                });
            }
            else if (WarningMessage) {

                Swal.fire({
                    html: '<div class="mt-3">' +
                        '<lord-icon src="https://cdn.lordicon.com/tdrtiskw.json" trigger="loop" colors="primary:#f06548,secondary:#f7b84b" style="width:120px;height:120px"></lord-icon>' +
                        '<div class="mt-4 pt-2 fs-15">' +
                        '<h4>Oops...! Something went Wrong !</h4>' +
                        '<p class="text-muted mx-4 mb-0">' + WarningMessage + '</p>' +
                        '</div>' +
                        '</div>',
                    showCancelButton: true,
                    showConfirmButton: false,
                    cancelButtonClass: 'btn btn-primary w-xs mb-1',
                    cancelButtonText: 'Dismiss',
                    buttonsStyling: false,
                    showCloseButton: true
                })

            }

            document.getElementById("deleteitem").addEventListener("click", function () {
                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                    cancelButtonClass: 'btn btn-danger w-xs mt-2',
                    confirmButtonText: "Yes, delete it!",
                    buttonsStyling: false,
                    showCloseButton: true
                }).then(function (result) {
                    if (result.value) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'Your file has been deleted.',
                            icon: 'success',
                            confirmButtonClass: 'btn btn-primary w-xs mt-2',
                            buttonsStyling: false
                        })
                    }
                });
            });
        });
</script>

<script>


    document.getElementById("idjobnumber").addEventListener("keydown", function (event) {
        if (event.key === "Tab") {
            myFunction();
        }
    });

    function myFunction() {
        // Get the element by its id
        var element = document.getElementById("idjobnumber");

        // Get the value of the element
        var value = element.value;

        $.getJSON('/Inward/GetPartnorevno', { idjobnumber: value }, function (data) {
            if (data !== null) {
                debugger
                $("#idpartnumber").val(data.Partno);
                $("#idrev").val(data.ERev);
            } else {
                console.log("No data found or error occurred.");
            }
        });
    }
</script>
